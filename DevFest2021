(為了那些不是Android工程師的聽眾，就簡單帶過技術細節)

# 為何要重構

### 外部表現

1. 在老玩家回來玩的時候，這段時間所累計的訊息都需要一筆一筆傳送，等到讀完才能開始玩遊戲，兩萬筆的聊天訊息就要等待4個小時以上
2. 使用起來常常卡頓，滑動不順暢，或是對於手勢沒有反應
3. 活動期間或是流量大時幾乎無法使用
4. 需要的安裝容量龐大

### 內在問題

1. 與winphone共用一個核心的想法大幅失敗，原本的設計者並不是熟悉在Android上的常用流程．winphone成為時代的眼淚．但那時為了跨平台所做的特殊設計卻留了下來
2. 沒有架構，沒有MVC，什麼都在View層進行．甚至會有畫面元件如果缺少資料就自行進行Api請求補齊資料的例子
3. 有個龐大的God Object，裡面可以進行許多黑箱作業，這個God Object無處不在，十分方便也十分混亂．裡面有許多overDesign的部分
4. 使用的技術老舊，再加上多次的疊床架屋，造成效能問題
5. 許多workAround的作法後來也沒有修正，放到被人遺忘

# 重構策略

1. 重新使用MVVM來撰寫，放棄winPhone跨平台，回到Android本身
2. 比起一次全部重構的劇痛，分區塊與功能進行重構
3. 保持新區塊與舊區塊的分離，之間的交互作用必須小心，互不干擾．

# 遭遇的問題

1. 沒有文件與足夠了解專案內容的人
描述：經過了多年的迭代，已經沒有足夠了解專案內容的人，只能憑以前的印象來猜測功能實作
短期解法：放棄完美重現原本專案，多加溝通，只留下必要部分．之後循序補充．
長期預防：留下文件，提高Code的可閱讀性．減少交接成本．
2. 實作新技術差距
描述:Long polling，okHttp，android.support.v4
短期解法 :更新新技術Android Jetpack，Retrofit，AndroidX，Protobuf
長期預防：進行每週固定的分享心得，鼓勵成員提出意見
3. 疊床架屋架構與workAround
描述：多年的迭代讓code quality下降，沒有解決的workAround持續存在
短期解法：攤平結構，拔除全能神物件，不要求完美重現
長期預防：徹底執行MVC分離．進行Code Review，進行雙人小組配合成長，對於架構與規則進行團隊討論，撰寫測試
4. 時程壓力
描述：在重構同時仍然需要一定產出
    
短期解法：選擇重點功能，不重要的功能暫時保留舊版．重構時新舊並行，雖然會增加浪費開發成本但是仍有持續產出
長期預防：多加溝通，建立與PM的互信互助關係
    
# 重構結論
    
1. 溝通
    描述：埋頭苦幹很容易成為無頭蒼蠅．藉由溝通不僅可以傳達相互的計劃，也能減少做白工的機會．做白工不僅讓人心累．還造成開發能量的浪費，有時候幾句話的確認就能迴避掉很多工作
    除此之外，聽聽工程團隊內的意見，相互討論，是能夠快速拉高工程團隊水平的有效方法．而經過討論而吸收的知識，比起單方面的教授，更容易被內化成知識．進而增加開發能量．
    不同觀點的碰撞有時候可以發現思考上的誤區，或者作法上的盲點，可以提高整體的code quality
    這些部分在重構時就更加重要，因為重構的時程通常緊張，更加承擔不起做白工的代價，所以在正式開始前先確定好實作重構的範圍與目標，花費些許時間所帶來的保險是可以接受的．
    
2. 規則
    描述：重構的工作量通常不少，並且可能會有各種不同的狀況需要處理，小至一兩行的程式碼寫法，大至專案的整體架構，預先訂下處理規則，可以減少花費的時間．
3. 還債
    描述：並不是重構完成後就一切圓滿了，如果不好好維持Code base的水平．可能過一段時間，又會變成其他人口中的爛Code．所以持續維護程式碼的品質，並且減少因為時程或是其他原因所欠下的技術債．
    利用童子軍法則．進入Code Base之前Code的水平需要跟之前一致或是更好．
4. 妥協
    描述：並不要求一步到位完成整個重構，先做些基礎或是簡單的版本，重點在未來再次重構時必須易於修改與維護，可以舒緩時程壓力，在持續產出下進行重構，痛苦的程度也不會過高．
